/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FoodService } from "./components/calories-tracker/add";
import { FoodService as FoodService1 } from "./components/calories-tracker/current-day-tracked-food copy";
import { FoodService as FoodService2 } from "./components/calories-tracker/current-day-calories-and-macros";
import { UnixTimestamp } from "./utils/unix-timestamp";
import { FoodInformationService, FoodService as FoodService3 } from "./components/calories-tracker/scan-food";
export namespace Components {
    interface AddFood {
        "day": string;
        "service": FoodService;
    }
    interface AppRoot {
    }
    interface BarcodeReader {
        "onCodeChange": (readCode: string) => void;
    }
    interface CurrentDayFoodList {
        "dayMonthYear": string;
        "service": FoodService;
    }
    interface CurrentDayMacros {
        "dayMonthYear": string;
        "service": FoodService;
    }
    interface DateReader {
        "onDateChange": (date: UnixTimestamp) => void;
    }
    interface DayOverview {
        "dayMonthYear": string;
    }
    interface ScanFood {
        "dayMonthYear": string;
        "foodInformationService": FoodInformationService;
        "foodService": FoodService;
    }
}
declare global {
    interface HTMLAddFoodElement extends Components.AddFood, HTMLStencilElement {
    }
    var HTMLAddFoodElement: {
        prototype: HTMLAddFoodElement;
        new (): HTMLAddFoodElement;
    };
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLBarcodeReaderElement extends Components.BarcodeReader, HTMLStencilElement {
    }
    var HTMLBarcodeReaderElement: {
        prototype: HTMLBarcodeReaderElement;
        new (): HTMLBarcodeReaderElement;
    };
    interface HTMLCurrentDayFoodListElement extends Components.CurrentDayFoodList, HTMLStencilElement {
    }
    var HTMLCurrentDayFoodListElement: {
        prototype: HTMLCurrentDayFoodListElement;
        new (): HTMLCurrentDayFoodListElement;
    };
    interface HTMLCurrentDayMacrosElement extends Components.CurrentDayMacros, HTMLStencilElement {
    }
    var HTMLCurrentDayMacrosElement: {
        prototype: HTMLCurrentDayMacrosElement;
        new (): HTMLCurrentDayMacrosElement;
    };
    interface HTMLDateReaderElement extends Components.DateReader, HTMLStencilElement {
    }
    var HTMLDateReaderElement: {
        prototype: HTMLDateReaderElement;
        new (): HTMLDateReaderElement;
    };
    interface HTMLDayOverviewElement extends Components.DayOverview, HTMLStencilElement {
    }
    var HTMLDayOverviewElement: {
        prototype: HTMLDayOverviewElement;
        new (): HTMLDayOverviewElement;
    };
    interface HTMLScanFoodElement extends Components.ScanFood, HTMLStencilElement {
    }
    var HTMLScanFoodElement: {
        prototype: HTMLScanFoodElement;
        new (): HTMLScanFoodElement;
    };
    interface HTMLElementTagNameMap {
        "add-food": HTMLAddFoodElement;
        "app-root": HTMLAppRootElement;
        "barcode-reader": HTMLBarcodeReaderElement;
        "current-day-food-list": HTMLCurrentDayFoodListElement;
        "current-day-macros": HTMLCurrentDayMacrosElement;
        "date-reader": HTMLDateReaderElement;
        "day-overview": HTMLDayOverviewElement;
        "scan-food": HTMLScanFoodElement;
    }
}
declare namespace LocalJSX {
    interface AddFood {
        "day"?: string;
        "service"?: FoodService;
    }
    interface AppRoot {
    }
    interface BarcodeReader {
        "onCodeChange"?: (readCode: string) => void;
    }
    interface CurrentDayFoodList {
        "dayMonthYear"?: string;
        "service"?: FoodService;
    }
    interface CurrentDayMacros {
        "dayMonthYear"?: string;
        "service"?: FoodService;
    }
    interface DateReader {
        "onDateChange"?: (date: UnixTimestamp) => void;
    }
    interface DayOverview {
        "dayMonthYear"?: string;
    }
    interface ScanFood {
        "dayMonthYear"?: string;
        "foodInformationService"?: FoodInformationService;
        "foodService"?: FoodService;
    }
    interface IntrinsicElements {
        "add-food": AddFood;
        "app-root": AppRoot;
        "barcode-reader": BarcodeReader;
        "current-day-food-list": CurrentDayFoodList;
        "current-day-macros": CurrentDayMacros;
        "date-reader": DateReader;
        "day-overview": DayOverview;
        "scan-food": ScanFood;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "add-food": LocalJSX.AddFood & JSXBase.HTMLAttributes<HTMLAddFoodElement>;
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "barcode-reader": LocalJSX.BarcodeReader & JSXBase.HTMLAttributes<HTMLBarcodeReaderElement>;
            "current-day-food-list": LocalJSX.CurrentDayFoodList & JSXBase.HTMLAttributes<HTMLCurrentDayFoodListElement>;
            "current-day-macros": LocalJSX.CurrentDayMacros & JSXBase.HTMLAttributes<HTMLCurrentDayMacrosElement>;
            "date-reader": LocalJSX.DateReader & JSXBase.HTMLAttributes<HTMLDateReaderElement>;
            "day-overview": LocalJSX.DayOverview & JSXBase.HTMLAttributes<HTMLDayOverviewElement>;
            "scan-food": LocalJSX.ScanFood & JSXBase.HTMLAttributes<HTMLScanFoodElement>;
        }
    }
}
